# tradeShort.py
import MetaTrader5 as mt5
import pandas as pd
import numpy as np
from datetime import datetime
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.trend import EMAIndicator, MACD
from ta.volatility import BollingerBands
from ta.volatility import AverageTrueRange
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import joblib

# STEP 1: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MT5
symbol = 'XAUUSDm'
timeframe = mt5.TIMEFRAME_M15  # M15 = 15 ‡∏ô‡∏≤‡∏ó‡∏µ
n_bars = 90000  # ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏Å‡πá‡πÑ‡∏î‡πâ

if not mt5.initialize():
    print("MT5 initialization failed", mt5.last_error())
    quit()

rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, n_bars)
mt5.shutdown()

df = pd.DataFrame(rates)
df['time'] = pd.to_datetime(df['time'], unit='s')
df.set_index('time', inplace=True)


# STEP 2: ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏≠‡∏¥‡∏ô‡∏î‡∏¥‡πÄ‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå
df['RSI'] = RSIIndicator(close=df['close'], window=14).rsi()
df['EMA_fast'] = EMAIndicator(close=df['close'], window=5).ema_indicator()
df['EMA_slow'] = EMAIndicator(close=df['close'], window=20).ema_indicator()

macd = MACD(close=df['close'])
df['MACD'] = macd.macd()
df['MACD_signal'] = macd.macd_signal()
df['MACD_hist'] = df['MACD'] - df['MACD_signal'] # ‡πÄ‡∏û‡∏¥‡πà‡∏° MACD Histogram

stoch = StochasticOscillator(high=df['high'], low=df['low'], close=df['close'])
df['Stoch_K'] = stoch.stoch()
df['Stoch_D'] = stoch.stoch_signal()

bb = BollingerBands(close=df['close'], window=20, window_dev=2)
df['BB_upper'] = bb.bollinger_hband()
df['BB_lower'] = bb.bollinger_lband()
df['BB_width'] = df['BB_upper'] - df['BB_lower']
df['BB_percent_b'] = (df['close'] - bb.bollinger_lband()) / (bb.bollinger_hband() - bb.bollinger_lband()) # ‡πÄ‡∏û‡∏¥‡πà‡∏° %B

df['ATR'] = AverageTrueRange(high=df['high'], low=df['low'], close=df['close'], window=14).average_true_range() # ATR ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

# ‡πÅ‡∏£‡∏á‡∏ã‡∏∑‡πâ‡∏≠-‡πÅ‡∏£‡∏á‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡πá‡∏ß (Price Action Features)
df['Price_change'] = df['close'] - df['open']
df['Body_size'] = abs(df['close'] - df['open'])
df['Upper_shadow'] = df['high'] - df[['close','open']].max(axis=1)
df['Lower_shadow'] = df[['close','open']].min(axis=1) - df['low']

# ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏±‡πâ‡∏ô
df['ROC'] = df['close'].pct_change(periods=3)

# ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ oversold / overbought (‡∏à‡∏≤‡∏Å RSI)
df['RSI_Overbought'] = (df['RSI'] > 70).astype(int)
df['RSI_Oversold'] = (df['RSI'] < 30).astype(int)

# Time Features
df['hour'] = df.index.hour
df['dayofweek'] = df.index.dayofweek

# Lagged Features (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
df['RSI_lag1'] = df['RSI'].shift(1)
df['MACD_lag1'] = df['MACD'].shift(1)
df['EMA_fast_lag1'] = df['EMA_fast'].shift(1)
df['EMA_slow_lag1'] = df['EMA_slow'].shift(1)
df['Stoch_K_lag1'] = df['Stoch_K'].shift(1)
df['Stoch_D_lag1'] = df['Stoch_D'].shift(1)
df['ATR_lag1'] = df['ATR'].shift(1)


# New features from your code (‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô 'features')
df['return_1'] = df['close'].pct_change(1)
df['return_5'] = df['close'].pct_change(5)
df['ema_ratio'] = df['EMA_fast'] / df['EMA_slow'] # ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô EMA

df['volume_change'] = df['tick_volume'].pct_change()
df['volume_avg'] = df['tick_volume'].rolling(20).mean()
df['volume_ratio'] = df['tick_volume'] / df['volume_avg'] # ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô Volume ‡∏Å‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢

df['price_slope'] = df['close'].diff(5) # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤

df['close_lag1'] = df['close'].shift(1)
df['close_lag2'] = df['close'].shift(2)

# ‡πÄ‡∏û‡∏¥‡πà‡∏° Features ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
df['EMA_diff'] = df['EMA_fast'] - df['EMA_slow'] # ‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á EMA
df['Stoch_diff'] = df['Stoch_K'] - df['Stoch_D'] # ‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á Stochastics
df['Upper_shadow_ratio'] = df['Upper_shadow'] / df['Body_size'] # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏≤‡∏ö‡∏ô‡∏ï‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡πà‡∏á
df['Lower_shadow_ratio'] = df['Lower_shadow'] / df['Body_size'] # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏≤‡∏•‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡πà‡∏á

df.dropna(inplace=True)

# STEP 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á Target (‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 0.3%)
df['future_return'] = df['close'].shift(-3) / df['close']-1
# df['target'] = np.where(df['future_return'] > 0.003, 1,
#                         np.where(df['future_return'] < -0.003, 0, np.nan))
#df['target'] = np.where(df['future_return'] > 0.003, 1,
#                         np.where(df['future_return'] < -0.003, 0, np.nan))

# ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏´‡∏°‡πà 1: ‡πÄ‡∏û‡∏¥‡πà‡∏° threshold
df['target'] = np.where(df['future_return'] > 0.005, 1,
               np.where(df['future_return'] < -0.005, 0, np.nan))

# Target ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ‡∏Ç‡∏∂‡πâ‡∏ô (1) ‡∏´‡∏£‡∏∑‡∏≠ ‡∏•‡∏á (0) ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î
df['target_simple'] = np.where(df['close'].shift(-3) > df['close'], 1, 0)
# ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢ 'target_simple' ‡∏î‡∏π‡∏ß‡πà‡∏≤ Accuracy ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

df.dropna(inplace=True)

# STEP 4: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# features = [
#     'open', 'high', 'low', 'close', 'tick_volume',
#     'RSI', 'EMA_fast', 'EMA_slow',
#     'MACD', 'MACD_signal',
#     'Stoch_K', 'Stoch_D',
#     'BB_upper', 'BB_lower', 'BB_width'
# ]

# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï List ‡∏Ç‡∏≠‡∏á Features ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÜ ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
features = [
    'open', 'high', 'low', 'close', 'tick_volume',
    'RSI', 'EMA_fast', 'EMA_slow',
    'MACD', 'MACD_signal', 'MACD_hist', # ‡πÄ‡∏û‡∏¥‡πà‡∏° MACD_hist
    'Stoch_K', 'Stoch_D',
    'BB_upper', 'BB_lower', 'BB_width', 'BB_percent_b', # ‡πÄ‡∏û‡∏¥‡πà‡∏° BB_percent_b
    'ATR', # ‡πÄ‡∏û‡∏¥‡πà‡∏° ATR
    'Price_change', 'Body_size', 'Upper_shadow', 'Lower_shadow',
    'ROC',
    'RSI_Overbought', 'RSI_Oversold',
    'hour', 'dayofweek',
    'RSI_lag1', 'MACD_lag1', 'EMA_fast_lag1', 'EMA_slow_lag1', # ‡πÄ‡∏û‡∏¥‡πà‡∏° lagged EMA
    'Stoch_K_lag1', 'Stoch_D_lag1', 'ATR_lag1', # ‡πÄ‡∏û‡∏¥‡πà‡∏° lagged ATR
    'return_1', 'return_5', 'ema_ratio',
    'volume_change', 'volume_avg', 'volume_ratio',
    'price_slope',
    'close_lag1', 'close_lag2',
    'EMA_diff', 'Stoch_diff', # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏¥‡∏ô‡∏î‡∏¥‡πÄ‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå
    'Upper_shadow_ratio', 'Lower_shadow_ratio' # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏≤
]

X = df[features]
# y = df['target'].astype(int)

y = df['target'].astype(int)

#X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=False, test_size=0.2)

# ‡πÉ‡∏ä‡πâ 70% ‡πÄ‡∏ó‡∏£‡∏ô, 15% validation, 15% test
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, shuffle=False)
X_valid, X_test, y_valid, y_test = train_test_split(X_temp, y_temp, test_size=0.5, shuffle=False)

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™
# ... (‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì scale_pos_weight_value)
neg_count = y_train.value_counts()[0]
pos_count = y_train.value_counts()[1]
scale_pos_weight_value = neg_count / pos_count
print(f"Scale Pos Weight: {scale_pos_weight_value}")

# ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠
# scale_pos_weight_adjusted =300 # ‡∏´‡∏£‡∏∑‡∏≠ 0.9 ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á 1.0
print(f"Adjusted Scale Pos Weight: {scale_pos_weight_value}")

# STEP 5: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô XGBoost
model = XGBClassifier(
    n_estimators=1000,       # ‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏™‡∏π‡∏á‡∏û‡∏≠
    max_depth=5,
    learning_rate=0.05,
    subsample=0.9,
    colsample_bytree=0.8,
    scale_pos_weight=scale_pos_weight_value,
    eval_metric='logloss',
    random_state=42
)

model.fit(
    X_train, y_train,
    eval_set=[(X_valid, y_valid)],
    verbose=True
)


# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏ù‡∏∂‡∏Å
print("--- y_train value counts ---")
print(y_train.value_counts())
print("-" * 25)

# (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
y_pred = model.predict(X_test)
acc = accuracy_score(y_test, y_pred)
print("üéØ Accuracy:", round(acc, 4))
print(classification_report(y_test, y_pred))

# STEP 6: ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•
y_pred = model.predict(X_test)
acc = accuracy_score(y_test, y_pred)
print("üéØ Accuracy:", round(acc, 4))
print(classification_report(y_test, y_pred))

# STEP 7: ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ó‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
latest = df[features].iloc[-1:]
prediction = model.predict(latest)[0]
print("üìà ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡πÅ‡∏ó‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏∞", "‚¨ÜÔ∏è ‡∏Ç‡∏∂‡πâ‡∏ô" if prediction == 1 else "‚¨áÔ∏è ‡∏•‡∏á")

# ‡πÄ‡∏û‡∏¥‡πà‡∏° column ‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ñ‡∏π‡∏Å‡∏°‡∏±‡πâ‡∏¢ ‡πÅ‡∏•‡∏∞ Return ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
df_test = df.loc[y_test.index].copy()

# ‡πÄ‡∏ä‡πá‡∏Å index ‡∏î‡∏π‡∏ß‡πà‡∏≤ match ‡∏Å‡∏±‡∏ô‡∏°‡∏±‡πâ‡∏¢
print("üßæ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á index ‡πÉ‡∏ô df:", df.index[-5:])
print("üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á index ‡πÉ‡∏ô y_test:", y_test.index[:5])

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå y_pred
df_test['y_pred'] = y_pred

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
df_test['strategy_return'] = np.where(
    df_test['y_pred'] == 1, df_test['future_return'],
    np.where(df_test['y_pred'] == 0, -df_test['future_return'], 0)
)

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏™‡∏∞‡∏™‡∏°
cumulative_return = (1 + df_test['strategy_return']).cumprod()
final_return = cumulative_return.iloc[-1]

df_test['buy_and_hold'] = df_test['future_return']
baseline_return = (1 + df_test['buy_and_hold']).cumprod().iloc[-1]
print("üìä Buy & Hold:", round(baseline_return, 4))

print("üíπ ‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå:", round(final_return, 4))
print("üìà ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ô‡∏µ‡πâ", "‚úÖ ‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£" if final_return > 1 else "‚ùå ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô")

import matplotlib.pyplot as plt
(1 + df_test['strategy_return']).cumprod().plot(label='Strategy')
(1 + df_test['future_return']).cumprod().plot(label='Buy & Hold')
plt.legend()
plt.title('Strategy vs Buy & Hold')
plt.show()



# STEP 8: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
joblib.dump(model, 'rf_model_tradeShort.pkl')
